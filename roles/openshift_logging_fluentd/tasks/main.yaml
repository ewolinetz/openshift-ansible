---
- name: Set default image variables based on openshift_deployment_type
  include_vars: "{{ var_file_name }}"
  with_first_found:
    - "{{ openshift_deployment_type }}.yml"
    - "default_images.yml"
  loop_control:
    loop_var: var_file_name

- name: Set fluentd image facts
  set_fact:
      __fluentd_image:
        image_prefix: "{{ openshift_logging.fluentd.image_prefix | default(__openshift_logging_fluentd_image_prefix) }}"
        image_version: "{{ openshift_logging.fluentd.image_version | default(__openshift_logging_fluentd_image_version) }}"

- set_fact:
    __default_fluentd: "{{ __default_fluentd | combine( __fluentd_image, recursive=True) }}"

- set_fact:
    __fluentd: "{{ __default_fluentd | combine( openshift_logging.fluentd, recursive=True) }}"

- assert:
    that: __fluentd.nodeselector.keys() | count <= 1
    msg: Only one Fluentd nodeselector key pair should be provided

- assert:
    that:
      - __fluentd.app.host
      - __fluentd.app.host != ''
    msg: Application logs destination is required

- assert:
    that:
      - __fluentd.infra.host
      - __fluentd.infra.host != ''
    msg: Operations (infra) logs destination is required

- assert:
    that: __fluentd.deployment_type in __allowed_fluentd_types
    msg: Invalid deployment type, one of ['hosted', 'secure-aggregator', 'secure-host'] allowed

- assert:
    that: __fluentd.mux_client_mode in __allowed_mux_client_modes
    msg: Invalid openshift_logging_mux_client_mode [{{ __fluentd.mux_client_mode }}], one of {{ __allowed_mux_client_modes }} allowed
  when: __fluentd.mux_client_mode is defined

- debug:
    msg: WARNING Use of __fluentd.mux_client_mode=minimal is not recommended due to current scaling issues
  when:
    - __fluentd.mux_client_mode is defined
    - __fluentd.mux_client_mode == 'minimal'

# allow passing in a tempdir
- name: Create temp directory for doing work in
  command: mktemp -d /tmp/openshift-logging-ansible-XXXXXX
  register: mktemp
  changed_when: False

- set_fact:
    tempdir: "{{ mktemp.stdout }}"

- name: Create templates subdirectory
  file:
    state: directory
    path: "{{ tempdir }}/templates"
    mode: 0755
  changed_when: False

# we want to make sure we have all the necessary components here

# create service account
- name: Create Fluentd service account
  oc_serviceaccount:
    state: present
    name: "aggregated-logging-fluentd"
    namespace: "{{ __fluentd.namespace }}"
    image_pull_secrets: "{{ __fluentd.image_pull_secret }}"
  when: __fluentd.image_pull_secret != ''

- name: Create Fluentd service account
  oc_serviceaccount:
    state: present
    name: "aggregated-logging-fluentd"
    namespace: "{{ __fluentd.namespace }}"
  when:
    - __fluentd.image_pull_secret == ''

# set service account scc
- name: Set privileged permissions for Fluentd
  oc_adm_policy_user:
    namespace: "{{ __fluentd.namespace }}"
    resource_kind: scc
    resource_name: privileged
    state: present
    user: "system:serviceaccount:{{ __fluentd.namespace }}:aggregated-logging-fluentd"

# set service account permissions
- name: Set cluster-reader permissions for Fluentd
  oc_adm_policy_user:
    namespace: "{{ __fluentd.namespace }}"
    resource_kind: cluster-role
    resource_name: cluster-reader
    state: present
    user: "system:serviceaccount:{{ __fluentd.namespace }}:aggregated-logging-fluentd"

# create Fluentd configmap
- template:
    src: "{{ __base_file_dir }}/fluent.conf.j2"
    dest: "{{ tempdir }}/fluent.conf"
  vars:
    deploy_type: "{{ __fluentd.deployment_type }}"

- copy:
    src: "{{ __base_file_dir }}/fluentd-throttle-config.yaml"
    dest: "{{ tempdir }}/fluentd-throttle-config.yaml"

- copy:
    src: "{{ __base_file_dir }}/secure-forward.conf"
    dest: "{{ tempdir }}/secure-forward.conf"

- import_role:
    name: openshift_logging
    tasks_from: patch_configmap_files.yaml
  vars:
    configmap_name: "logging-fluentd"
    configmap_namespace: "{{ __fluentd.namespace }}"
    configmap_file_names:
      - current_file: "fluent.conf"
        new_file: "{{ tempdir }}/fluent.conf"
      - current_file: "throttle-config.yaml"
        new_file: "{{ tempdir }}/fluentd-throttle-config.yaml"
      - current_file: "secure-forward.conf"
        new_file: "{{ tempdir }}/secure-forward.conf"

- name: Set Fluentd configmap
  oc_configmap:
    state: present
    name: "logging-fluentd"
    namespace: "{{ __fluentd.namespace }}"
    from_file:
      fluent.conf: "{{ tempdir }}/fluent.conf"
      throttle-config.yaml: "{{ tempdir }}/fluentd-throttle-config.yaml"
      secure-forward.conf: "{{ tempdir }}/secure-forward.conf"

# create Fluentd secret
# if we don't provide a location for provided certs then we use from generated_certs_dir
# ops will use the same certs as non-ops by default
# TODO: add aggregation secrets if necessary
- name: Set logging-fluentd secret
  oc_secret:
    state: present
    name: logging-fluentd
    namespace: "{{ __fluentd.namespace }}"
    files:
      - name: ca
        path: "{{ __fluentd.app.ca_path | default(generated_certs_dir ~ '/ca.crt') }}"
      - name: key
        path: "{{ __fluentd.app.key_path | default(generated_certs_dir ~ '/system.logging.fluentd.key') }}"
      - name: cert
        path: "{{ __fluentd.app.cert_path | default(generated_certs_dir ~ '/system.logging.fluentd.crt') }}"
      - name: ops-ca
        path: "{{ __fluentd.infra.ca_path | default(generated_certs_dir ~ '/ca.crt') }}"
      - name: ops-key
        path: "{{ __fluentd.infra.key_path | default(generated_certs_dir ~ '/system.logging.fluentd.key') }}"
      - name: ops-cert
        path: "{{ __fluentd.infra.cert_path | default(generated_certs_dir ~ '/system.logging.fluentd.crt') }}"

# create Fluentd daemonset
# this should change based on the type of fluentd deployment to be done...
# TODO: pass in aggregation configurations
- name: Generate logging-fluentd daemonset definition
  template:
    src: "{{ __base_file_dir }}/fluentd.j2"
    dest: "{{ tempdir }}/templates/logging-fluentd.yaml"
  vars:
    daemonset_name: logging-fluentd
    daemonset_component: fluentd
    daemonset_container_name: fluentd-elasticsearch
    daemonset_serviceAccount: aggregated-logging-fluentd
    app_host: "{{ __fluentd.app.host }}"
    app_port: "{{ __fluentd.app.port }}"
    ops_host: "{{ __fluentd.infra.host }}"
    ops_port: "{{ __fluentd.infra.port }}"
    fluentd_nodeselector: "{{ __fluentd.nodeselector | to_yaml }}"
    fluentd_cpu_limit: "{{ __fluentd.cpu_limit }}"
    fluentd_cpu_request: "{{ __fluentd.cpu_request | min_cpu(__fluentd.cpu_limit | default(none)) }}"
    fluentd_memory_limit: "{{ __fluentd.memory_limit }}"
    audit_container_engine: "{{ __fluentd.audit_container_engine | default(False) | bool }}"
    audit_log_file: "{{ __fluentd.audit_file | default() }}"
    audit_pos_log_file: "{{ __fluentd.audit_pos_file | default() }}"
  check_mode: no
  changed_when: no

- name: Set logging-fluentd daemonset
  oc_obj:
    state: present
    name: logging-fluentd
    namespace: "{{ __fluentd.namespace }}"
    kind: daemonset
    files:
      - "{{ tempdir }}/templates/logging-fluentd.yaml"
    delete_after: true

# Scale up Fluentd
- name: Retrieve list of Fluentd hosts
  oc_obj:
    state: list
    kind: node
  when: "'--all' in __fluentd.hosts"
  register: fluentd_hosts

- name: Set openshift_logging_fluentd_hosts
  set_fact:
    __fluentd_hosts:
      hosts: "{{ fluentd_hosts.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  when: "'--all' in __fluentd.hosts"

- set_fact:
    __fluentd: "{{ __fluentd | combine( __fluentd_hosts, recursive=True ) }}"
  when: "'--all' in __fluentd.hosts"
- import_tasks: label_and_wait.yaml

- name: Delete temp directory
  file:
    name: "{{ tempdir }}"
    state: absent
  changed_when: False
